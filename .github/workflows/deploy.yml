name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Install expect
        run: sudo apt-get install -y expect    

      - name: Setup SSH directory
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.HETZNER_HOST }} >> ~/.ssh/known_hosts
          # Write the private key and remove its passphrase
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key_with_pass
          chmod 600 ~/.ssh/deploy_key_with_pass
          # Remove passphrase from the key
          ssh-keygen -p -P "${{ secrets.SSH_PASSPHRASE }}" -N "" -f ~/.ssh/deploy_key_with_pass
          mv ~/.ssh/deploy_key_with_pass ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "SSH directory setup complete"

      - name: Test SSH Connection
        run: |
          ssh -v -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }} "echo 'SSH connection successful'"

      - name: Prepare Deployment Files
        run: |
          # Create temporary directory for deployment files
          mkdir -p deploy_temp
          
          # Copy project files to temporary directory
          rsync -av --exclude='.git' \
                    --exclude='node_modules' \
                    --exclude='.next' \
                    --exclude='.env' \
                    --exclude='.env.*' \
                    --exclude='deploy_temp' \
                    --exclude='deploy.tar.gz' \
                    . deploy_temp/

          # Create tar archive
          cd deploy_temp && tar -czf ../deploy.tar.gz .
          cd ..

      - name: Create Remote Directory
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }} "
            sudo mkdir -p /opt/purity-app
            sudo chown -R \$USER:\$USER /opt/purity-app
          "

      - name: Copy Files
        run: |
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }}:/opt/purity-app/
   
      - name: Deploy Application
        run: |
          # Create environment file locally
          cat > env_temp << EOF
          NEXT_PUBLIC_APP_URL=${{ secrets.NEXT_PUBLIC_APP_URL }}
          PUBLIC_PATH=/opt/purity-app/public
          EOF

          # Extract and deploy the application
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }} "
            cd /opt/purity-app
            tar -xzf deploy.tar.gz
            rm deploy.tar.gz
          "

          # Copy environment file before build
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no env_temp ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }}:/opt/purity-app/.env

          # Install dependencies and build
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }} "
            cd /opt/purity-app
            npm ci
            npm run build
          "

      - name: Start Application
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes ${{ secrets.HETZNER_USERNAME }}@${{ secrets.HETZNER_HOST }} "
            cd /opt/purity-app
            
            # Check for PM2 installation
            if ! command -v pm2 &> /dev/null; then
              echo 'PM2 not found, installing PM2...'
              sudo npm install -g pm2
            fi
            
            # Stop existing application if running
            if pm2 list | grep -q 'purity-app'; then
              echo 'Stopping existing application instance...'
              pm2 stop purity-app
              pm2 delete purity-app
            fi
            
            # Start the Next.js application with PM2
            echo 'Starting Next.js application with PM2 on port 3059...'
            pm2 start npm --name 'purity-app' -- start -- -p 3059
            
            # Save PM2 process list
            pm2 save
            
            # Setup PM2 to start on system boot
            sudo env PATH=\$PATH:/usr/bin pm2 startup systemd -u \$USER --hp \$HOME || true
            
            echo 'Application started successfully on port 3059'
          "

      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          for i in {1..5}; do
            if curl -s -f "http://${{ secrets.HETZNER_HOST }}:3059" > /dev/null; then
              echo "Deployment verified successfully"
              exit 0
            fi
            echo "Waiting for service to be ready... (attempt $i/5)"
            sleep 10
          done
          echo "Failed to verify deployment"
          exit 1

      - name: Cleanup
        if: always()
        run: |
          rm -rf deploy_temp
          rm -f deploy.tar.gz
          rm -f env_temp
          rm -f ~/.ssh/deploy_key
          rm -f ~/.ssh/deploy_key_with_pass
